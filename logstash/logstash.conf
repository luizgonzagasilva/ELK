# Kafka -> Logstash -> Elasticsearch

input{
  kafka{
    codec => "json"
    bootstrap_servers => "${KAFKA_HOST1},${KAFKA_HOST2}"
    topics => ["app_logs","request_logs"]
    tags => ["alcd"]
  }
}

filter {	
	if [fields][topic_name] == "app_logs" {		
		grok {
			match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} *%{LOGLEVEL:level} %{DATA:pid} --- *\[%{DATA:application}] *%{DATA:class} : %{GREEDYDATA:msglog}" }
			tag_on_failure => ["not_date_line"]
		}			
		date {
			match => ["timestamp", "ISO8601"]
			target => "timestamp"
		}	
		if "_grokparsefailure" in [tags] {
			mutate {
				add_field => { "level" => "UNKNOWN" }
			}
		}		
	} else if [fields][topic_name] == "request_logs" {		
		grok {
			match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} *%{LOGLEVEL:level} %{GREEDYDATA:msglog}" }
		}		
		date {
			match => ["timestamp", "ISO8601"]
			target => "timestamp"
		}		
		json {
			source => "msglog"
			target => "parsed_json"
		}		
		if [level]=="INFO" or [level]=="WARN" {
			mutate {
				add_field => {"appName" => "%{[parsed_json][appName]}"}
				add_field => {"logType" => "%{[parsed_json][logType]}"}
				add_field => {"env" => "%{[parsed_json][env]}"}
				add_field => {"logSeverity" => "%{[parsed_json][logSeverity]}"}
				add_field => {"soc" => "%{[parsed_json][soc]}"}
				add_field => {"baseUri" => "%{[parsed_json][baseUri]}"}
				add_field => {"resourceURI" => "%{[parsed_json][resourceURI]}"}
				add_field => {"resourceAction" => "%{[parsed_json][resourceAction]}"}
				add_field => {"entity" => "%{[parsed_json][entity]}"}
				add_field => {"statusHttpCode" => "%{[parsed_json][statusHttpCode]}"}
				add_field => {"requestBytes" => "%{[parsed_json][requestBytes]}"}
				add_field => {"responseTime" => "%{[parsed_json][responseTime]}"}
				add_field => {"src" => "%{[parsed_json][src]}"}
				add_field => {"transactionId" => "%{[parsed_json][header][x-transaction-id]}"}
				remove_field => [ "json", "message" ]
				remove_field => [ "json", "parsed_json" ]
			}
		} else {
			mutate {
				add_field => {"msgerror" => "%{[parsed_json][message]}"}
				remove_field => [ "json", "message" ]
				remove_field => [ "json", "parsed_json" ]
			}
		}		
		if [transactionId] == "%{[parsed_json][header][x-transaction-id]}" {
			mutate {
				replace => ["transactionId","UNKNOWN"]
			}
		}
		mutate {
			convert => {"requestBytes" => "integer"}
			convert => {"responseTime" => "integer"}
		}		
		if "_grokparsefailure" in [tags] {
			mutate {
				add_field => { "level" => "UNKNOWN" }
			}
		}		
	}
}


output {
  elasticsearch {
    hosts => [ "${ELASTIC_HOST1}", "${ELASTIC_HOST2}", "${ELASTIC_HOST3}" ]
	#hosts => ["elasticsearch1:9200","elasticsearch2:9200","elasticsearch3:9200"]
    index => "%{[fields][topic_name]}-%{+YYYY.MM.dd}"
  }
}
